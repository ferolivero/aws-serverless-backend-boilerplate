openapi: 3.0.0
info:
  description: Contrato swagger para Ancla Intranet
  version: '1.0.0'
  title: Ancla Intranet API
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
x-amazon-apigateway-documentation:
  version: 0.1
  documentationParts:
    - location:
        type: API
      properties:
        description: Test API Integration
        info:
          description: Servicios disponibles para TEST API
          version: 0.1
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ferolivero/intranet-ancla-api/1.0.0
  - url: 'https://petstore.swagger.io/v2'
tags:
  - name: consorcio
    description: Operaciones referidas a consorcios
  - name: propietario
    description: Operaciones referidas a propietarios
  - name: proveedor
    description: Operaciones referidas a proveedores
  - name: reclamo
    description: Operaciones referidas a reclamos
  - name: amenity
    description: Operaciones referidas a amenities
  - name: unidad
    description: Operaciones referidas a unidades
  - name: reserva
    description: Operaciones referidas a reservas
  - name: novedad
    description: Operaciones referidas a novedades
  - name: user
    description: Operations about user
paths:
  /consorcio:
    post:
      tags:
        - consorcio
      summary: Agrega un nuevo consorcio
      operationId: addConsorcio
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Consorcio'
    get:
      tags:
        - consorcio
      summary: Encuentra todos los consorcios
      description: Devuelve una lista de consorcios
      operationId: getAllConsorcios
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Consorcio'
        '404':
          description: Consorcios no encontrados
  '/consorcio/{consorcioId}':
    get:
      tags:
        - consorcio
      summary: Encuentra un consorio por ID
      description: Devuelve un unico consorcio
      operationId: getConsorcioById
      parameters:
        - name: consorcioId
          in: path
          description: ID del consorcio retornado
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consorcio'
        '400':
          description: ID Invalido
        '404':
          description: Consorcio no encotrado
    put:
      tags:
        - consorcio
      summary: Actualiza un consorcio existente
      operationId: updateConsorcio
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      parameters:
        - name: consorcioId
          in: path
          description: ID del consorcio retornado
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Consorcio no encontrado
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/Consorcio'
    delete:
      tags:
        - consorcio
      summary: Elimina un consorcio
      operationId: deleteConsorcio
      parameters:
        - name: consorcioId
          in: path
          description: Id del consorcio a eliminar
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Consorcio no encontrado
  /propietario:
    post:
      tags:
        - propietario
      summary: Agrega un nuevo propietario
      operationId: addPropietario
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Propietario'
    get:
      tags:
        - propietario
      summary: Encuentra todos los propietarios
      description: Devuelve una lista de propietarios
      operationId: getAllPropietario
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Propietario'
        '404':
          description: Propietarios no encontrados
  '/propietario/{propietarioId}':
    get:
      tags:
        - propietario
      summary: Encuentra un propietario por ID
      description: Devuelve un unico propietario
      operationId: getPropietarioById
      parameters:
        - name: propietarioId
          in: path
          description: ID del propietario retornado
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Propietario'
        '400':
          description: ID Invalido
        '404':
          description: Propietario no encotrado
    put:
      tags:
        - propietario
      summary: Actualiza un propietario existente
      operationId: updatePropietario
      parameters:
        - name: propietarioId
          in: path
          description: ID del propietario retornado
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Propietario no encontrado
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/Propietario'
    delete:
      tags:
        - propietario
      summary: Elimina un propietario
      operationId: deletePropietario
      parameters:
        - name: propietarioId
          in: path
          description: Id del propietario a eliminar
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '400':
          description: ID Invalido
        '404':
          description: Propietario no encontrado
  /proveedor:
    post:
      tags:
        - proveedor
      summary: Agrega un nuevo proveedor
      operationId: addProveedor
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Proveedor'
    get:
      tags:
        - proveedor
      summary: Encuentra todos los proveedores
      description: Devuelve una lista de proveedores
      operationId: getAllProveedor
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Proveedor'
        '404':
          description: Propietarios no encontrados
  '/proveedor/{proveedorId}':
    get:
      tags:
        - proveedor
      summary: Encuentra un proveedor por ID
      description: Devuelve un unico proveedor
      operationId: getProveedorById
      parameters:
        - name: proveedorId
          in: path
          description: ID del proveedor retornado
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proveedor'
        '400':
          description: ID Invalido
        '404':
          description: Proveedor no encotrado
    put:
      tags:
        - proveedor
      summary: Actualiza un proveedor existente
      operationId: updateProveedor
      parameters:
        - name: proveedorId
          in: path
          description: ID del proveedor retornado
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Proveedor no encontrado
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/Proveedor'
    delete:
      tags:
        - proveedor
      summary: Elimina un proveedor
      operationId: deleteProveedor
      parameters:
        - name: proveedorId
          in: path
          description: Id del proveedor a eliminar
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '400':
          description: ID Invalido
        '404':
          description: Proveedor no encontrado
  /reclamo:
    post:
      tags:
        - reclamo
      summary: Agrega un nuevo reclamo
      operationId: addReclamo
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Reclamo'
    get:
      tags:
        - reclamo
      summary: Encuentra todos los reclamos
      description: Devuelve una lista de reclamos
      operationId: getAllReclamo
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reclamo'
        '404':
          description: Reclamos no encontrados
  '/reclamo/{reclamoId}':
    get:
      tags:
        - reclamo
      summary: Encuentra un reclamo por ID
      description: Devuelve un unico reclamo
      operationId: getReclamoById
      parameters:
        - name: reclamoId
          in: path
          description: ID del reclamo retornado
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reclamo'
        '400':
          description: ID Invalido
        '404':
          description: Reclamo no encotrado
    put:
      tags:
        - reclamo
      summary: Actualiza un reclamo existente
      operationId: updateReclamo
      parameters:
        - name: reclamoId
          in: path
          description: ID del reclamo retornado
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Reclamo no encontrado
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/Reclamo'
    delete:
      tags:
        - reclamo
      summary: Elimina un reclamo
      operationId: deleteReclamo
      parameters:
        - name: reclamoId
          in: path
          description: Id del reclamo a eliminar
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '400':
          description: ID Invalido
        '404':
          description: Reclamo no encontrado
  /amenity:
    post:
      tags:
        - amenity
      summary: Agrega un nuevo amenity
      operationId: addAmenity
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Amenity'
    get:
      tags:
        - amenity
      summary: Encuentra todos los amenities
      description: Devuelve una lista de amenities
      operationId: getAllAmenity
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Amenity'
        '404':
          description: Amenities no encontrados
  '/amenity/{amenityId}':
    get:
      tags:
        - amenity
      summary: Encuentra un amenity por ID
      description: Devuelve un unico amenity
      operationId: getAmenityById
      parameters:
        - name: amenityId
          in: path
          description: ID del amenity retornado
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Amenity'
        '400':
          description: ID Invalido
        '404':
          description: Amenity no encotrado
    put:
      tags:
        - amenity
      summary: Actualiza un amenity existente
      operationId: updateAmenity
      parameters:
        - name: amenityId
          in: path
          description: ID del amenity retornado
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: amenity no encontrado
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/Amenity'
    delete:
      tags:
        - amenity
      summary: Elimina un amenity
      operationId: deleteAmenity
      parameters:
        - name: amenityId
          in: path
          description: Id del amenity a eliminar
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '400':
          description: ID Invalido
        '404':
          description: Amenity no encontrado
  /unidad:
    post:
      tags:
        - unidad
      summary: Agrega un nuevo unidad
      operationId: addUnidad
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Unidad'
    get:
      tags:
        - unidad
      summary: Encuentra todos los unidades
      description: Devuelve una lista de unidades
      operationId: getAllUnidad
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unidad'
        '404':
          description: Unidades no encontrados
  '/unidad/{unidadId}':
    get:
      tags:
        - unidad
      summary: Encuentra un unidad por ID
      description: Devuelve un unico unidad
      operationId: getUnidadById
      parameters:
        - name: unidadId
          in: path
          description: ID del unidad retornado
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unidad'
        '400':
          description: ID Invalido
        '404':
          description: Unidad no encotrado
    put:
      tags:
        - unidad
      summary: Actualiza un unidad existente
      operationId: updateUnidad
      parameters:
        - name: unidadId
          in: path
          description: ID del unidad retornado
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Unidad no encontrado
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/Unidad'
    delete:
      tags:
        - unidad
      summary: Elimina un unidad
      operationId: deleteUnidad
      parameters:
        - name: unidadId
          in: path
          description: Id del unidad a eliminar
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '400':
          description: ID Invalido
        '404':
          description: Unidad no encontrado
  /reserva:
    post:
      tags:
        - reserva
      summary: Agrega un nuevo reserva
      operationId: addReserva
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Reserva'
    get:
      tags:
        - reserva
      summary: Encuentra todos los reservas
      description: Devuelve una lista de reservas
      operationId: getAllReserva
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reserva'
        '404':
          description: Reservas no encontrados
  '/reserva/{reservaId}':
    get:
      tags:
        - reserva
      summary: Encuentra un reserva por ID
      description: Devuelve un unico reserva
      operationId: getReservaById
      parameters:
        - name: reservaId
          in: path
          description: ID del reserva retornado
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reserva'
        '400':
          description: ID Invalido
        '404':
          description: Reserva no encotrado
    put:
      tags:
        - reserva
      summary: Actualiza una reserva existente
      operationId: updateReserva
      parameters:
        - name: reservaId
          in: path
          description: ID del reserva retornado
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Reserva no encontrado
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/Reserva'
    delete:
      tags:
        - reserva
      summary: Elimina un reserva
      operationId: deleteReserva
      parameters:
        - name: reservaId
          in: path
          description: Id de la reserva a eliminar
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '400':
          description: ID Invalido
        '404':
          description: Reserva no encontrada
  /novedad:
    post:
      tags:
        - novedad
      summary: Agrega una nueva novedad
      operationId: addNovedad
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Novedad'
    get:
      tags:
        - novedad
      summary: Encuentra todos las novedades
      description: Devuelve una lista de novedades
      operationId: getAllNovedad
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Novedad'
        '404':
          description: Novedades no encontrados
  '/novedad/{novedadId}':
    get:
      tags:
        - novedad
      summary: Encuentra una novedad por ID
      description: Devuelve una unica novedad
      operationId: getNovedadById
      parameters:
        - name: novedadId
          in: path
          description: ID del novedad retornado
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unidad'
        '400':
          description: ID Invalido
        '404':
          description: Unidad no encotrado
    put:
      tags:
        - novedad
      summary: Actualiza una novedad existente
      operationId: updateNovedad
      parameters:
        - name: novedadId
          in: path
          description: ID de la novedad retornada
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Novedad no encontrado
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/Novedad'
    delete:
      tags:
        - novedad
      summary: Elimina un novedad
      operationId: deleteNovedad
      parameters:
        - name: novedadId
          in: path
          description: Id de la novedad a eliminar
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '400':
          description: ID Invalido
        '404':
          description: Novedad no encontrada
  '/pet/{petId}/uploadImage':
    post:
      tags:
        - pet
      summary: uploads an image
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  /store/inventory:
    get:
      tags:
        - consorcios
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      operationId: placeOrder
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the pet
        required: true
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.\ \ Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.\ \
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      x-amazon-apigateway-request-validator: 'Validate-Body'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
x-amazon-apigateway-request-validators:
  Validate-Body:
    validateRequestParameters: false
    validateRequestBody: true
  Validate-Params:
    validateRequestParameters: true
    validateRequestBody: false
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Consorcio:
      type: object
      required:
        - nombre
      properties:
        id:
          type: integer
          format: int64
        nombre:
          type: string
          example: consorcio-id
    Propietario:
      type: object
      required:
        - nombre
      properties:
        id:
          type: integer
          format: int64
        nombre:
          type: string
          example: Fer
    Proveedor:
      type: object
      required:
        - nombre
      properties:
        id:
          type: integer
          format: int64
        nombre:
          type: string
          example: Fer
    Reclamo:
      type: object
      required:
        - nombre
      properties:
        id:
          type: integer
          format: int64
        nombre:
          type: string
          example: Fer
    Amenity:
      type: object
      required:
        - nombre
      properties:
        id:
          type: integer
          format: int64
        nombre:
          type: string
          example: Fer
    Unidad:
      type: object
      required:
        - nombre
      properties:
        id:
          type: integer
          format: int64
        nombre:
          type: string
          example: Fer
    Reserva:
      type: object
      required:
        - nombre
      properties:
        id:
          type: integer
          format: int64
        nombre:
          type: string
          example: Fer
    Novedad:
      type: object
      required:
        - nombre
      properties:
        id:
          type: integer
          format: int64
        nombre:
          type: string
          example: Fer
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Consorcio:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Consorcio'
      description: Objeto de Consorcio
      required: true
    Propietario:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Propietario'
      description: Objeto de Propietario
      required: true
    Proveedor:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Proveedor'
      description: Objeto de Proveedor
      required: true
    Reclamo:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Reclamo'
      description: Objeto de Reclamo
      required: true
    Amenity:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Amenity'
      description: Objeto de Amenity
      required: true
    Unidad:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Unidad'
      description: Objeto de Unidad
      required: true
    Reserva:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Reserva'
      description: Objeto de Reserva
      required: true
    Novedad:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Novedad'
      description: Objeto de Novedad
      required: true
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
